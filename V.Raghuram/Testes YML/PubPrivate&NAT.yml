--- 
AWSTemplateFormatVersion: '2010-09-09'
Description: This Stack creates following resources - yet to finalize

Parameters:
  InstanceCount:
    Description: Number of EC2 instances (must be between 1 and 3).
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 3
    ConstraintDescription: Must be a number between 1 and 3
  MsKeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
    Default: nv-kp
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  MsInstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small]
    ConstraintDescription: must be a valid EC2 instance type.
  ImageId:
    Description: Image ID to launch EC2 instances.
    Type: AWS::EC2::Image::Id
    Default: ami-04681a1dbd79675a5
  

Conditions:
  Launch1: !Equals [1, 1]
  Launch2: !Not [!Equals [1, !Ref InstanceCount]]
  Launch3: !Or
  - !Not [!Equals [1, !Ref InstanceCount]]
  - !Not [!Equals [2, !Ref InstanceCount]]
      
      
Resources:    
  # Security Group Group and Rules creation
  MsSecGrp:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: "Allow HTTP/(s) SSH"
      SecurityGroupEgress:
        - 
          CidrIp: 0.0.0.0/0
          FromPort: "80"
          IpProtocol: tcp
          ToPort: "80"
      SecurityGroupIngress: 
        - 
          CidrIp: 0.0.0.0/0
          FromPort: "80"
          IpProtocol: tcp
          ToPort: "80"
        - 
          CidrIp: 0.0.0.0/0
          FromPort: "22"
          IpProtocol: tcp
          ToPort: "22"
      VpcId: !Ref MsVPC
        
  #Creating VPC
  MsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  #Creating Subnet
  MsPublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref MsVPC
  MsPrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref MsVPC




  MsInternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'MsVPC'
      InternetGatewayId: !Ref 'MsInternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'MsVPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'MsInternetGateway'

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MsPublicSubnet
      RouteTableId: !Ref PublicRouteTable


  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref MsPublicSubnet

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'MsVPC'
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref MsPrivateSubnet

  #Create Instance  
  MsInstance:
    Condition: Launch1
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref 'MsKeyName'
      ImageId: !Ref 'ImageId'
      InstanceType: !Ref 'MsInstanceType'
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        Description: ENI for Linux Instance
        DeviceIndex: '0'
        SubnetId: !Ref 'MsPublicSubnet'
        GroupSet:
        - !Ref 'MsSecGrp'
  
  MsInstance2:
    Condition: Launch2
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref 'MsKeyName'
      ImageId: !Ref 'ImageId'
      InstanceType: !Ref 'MsInstanceType'
      NetworkInterfaces:
      - AssociatePublicIpAddress: false
        DeleteOnTermination: true
        Description: ENI for Linux Instance
        DeviceIndex: '0'
        SubnetId: !Ref 'MsPrivateSubnet'
        GroupSet:
        - !Ref 'MsSecGrp'
